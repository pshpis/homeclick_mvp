generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model areas {
  id                                              Int                   @id @default(autoincrement())
  created_at                                      DateTime              @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime              @default(now()) @db.Timestamp(6)
  median_price_3_months_mom_pct                   Decimal?              @db.Decimal(15, 5)
  median_price_3_months                           Decimal?              @db.Decimal(15, 5)
  median_price_per_sqft_3_months                  Int?
  median_price_per_sqft_3_months_mom_pct          Decimal?              @db.Decimal(15, 5)
  roi_stat_rent                                   Int?
  roi_stat_rent_pct                               Decimal?              @db.Decimal(15, 5)
  roi_stat_resale                                 Int?
  roi_stat_resale_pct                             Decimal?              @db.Decimal(15, 5)
  roi_stat_resale_plus_rent                       Int?
  roi_stat_resale_plus_rent_pct                   Decimal?              @db.Decimal(15, 5)
  slug                                            String                @unique(map: "idx_areas_slug") @db.VarChar(64)
  transactions_3_months                           Int?
  transactions_3_months_mom                       Decimal?              @db.Decimal(15, 5)
  city_id                                         Int
  created_by                                      String?               @db.Uuid
  updated_by                                      String?               @db.Uuid
  status                                          String                @default("draft") @db.VarChar(255)
  sort                                            Int?
  photo                                           String?               @db.Uuid
  directus_users_areas_created_byTodirectus_users directus_users?       @relation("areas_created_byTodirectus_users", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "areas_created_by_foreign")
  directus_files                                  directus_files?       @relation(fields: [photo], references: [id], onUpdate: NoAction, map: "areas_photo_foreign")
  directus_users_areas_updated_byTodirectus_users directus_users?       @relation("areas_updated_byTodirectus_users", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "areas_updated_by_foreign")
  cities                                          cities                @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_areas_cities")
  areas_photos                                    areas_photos[]
  areas_translations                              areas_translations[]
  mall_areas                                      mall_areas[]
  metro_station_areas                             metro_station_areas[]
  projects                                        projects[]
}

model areas_translations {
  id             Int        @id @default(autoincrement())
  areas_id       Int?
  languages_code String?    @db.VarChar(255)
  name           String
  description    String?
  areas          areas?     @relation(fields: [areas_id], references: [id], onUpdate: NoAction, map: "areas_translations_areas_id_foreign")
  languages      languages? @relation(fields: [languages_code], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "areas_translations_languages_code_foreign")
}

model cities {
  id                                     Int                   @id @default(autoincrement())
  median_price_3_months_mom_pct          Decimal?              @db.Decimal(15, 5)
  median_price_3_months                  Decimal?              @db.Decimal(15, 5)
  median_price_per_sqft_3_months         Int?
  median_price_per_sqft_3_months_mom_pct Decimal?              @db.Decimal(15, 5)
  roi_stat_rent                          Int?
  roi_stat_rent_pct                      Decimal?              @db.Decimal(15, 5)
  roi_stat_resale                        Int?
  roi_stat_resale_pct                    Decimal?              @db.Decimal(15, 5)
  roi_stat_resale_plus_rent              Int?
  roi_stat_resale_plus_rent_pct          Decimal?              @db.Decimal(15, 5)
  slug                                   String                @unique(map: "unq_cities_slug") @db.VarChar(64)
  transactions_3_months                  Int?
  transactions_3_months_mom              Decimal?              @db.Decimal(15, 5)
  created_at                             DateTime?             @db.Timestamptz(6)
  updated_at                             DateTime?             @db.Timestamptz(6)
  status                                 String                @default("draft") @db.VarChar(255)
  sort                                   Int?
  photo                                  String?               @db.Uuid
  areas                                  areas[]
  directus_files                         directus_files?       @relation(fields: [photo], references: [id], onUpdate: NoAction, map: "cities_photo_foreign")
  cities_photos                          cities_photos[]
  cities_translations                    cities_translations[]
  developers                             developers[]
  malls                                  malls[]
  metro_stations                         metro_stations[]
}

model cities_translations {
  id             Int        @id @default(autoincrement())
  cities_id      Int?
  languages_code String?    @db.VarChar(255)
  name           String
  description    String?
  name_in        String?    @db.VarChar(255)
  cities         cities?    @relation(fields: [cities_id], references: [id], onUpdate: NoAction, map: "cities_translations_cities_id_foreign")
  languages      languages? @relation(fields: [languages_code], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "cities_translations_languages_code_foreign")
}

model developers {
  id                                     Int                       @id @default(autoincrement())
  created_at                             DateTime                  @default(now()) @db.Timestamp(6)
  updated_at                             DateTime                  @default(now()) @db.Timestamp(6)
  dl_developer_number                    Int?
  dl_license_expiry_date                 DateTime?                 @db.Timestamp(6)
  dl_license_issue_date                  DateTime?                 @db.Timestamp(6)
  dl_license_number                      Int?
  dl_registration_date                   DateTime?                 @db.Timestamp(6)
  median_price_3_months_mom_pct          Decimal?                  @db.Decimal(15, 5)
  median_price_3_months                  Decimal?                  @db.Decimal(15, 5)
  median_price_per_sqft_3_months         Int?
  median_price_per_sqft_3_months_mom_pct Decimal?                  @db.Decimal(15, 5)
  roi_stat_rent                          Int?
  roi_stat_rent_pct                      Decimal?                  @db.Decimal(15, 5)
  roi_stat_resale                        Int?
  roi_stat_resale_pct                    Decimal?                  @db.Decimal(15, 5)
  roi_stat_resale_plus_rent              Int?
  roi_stat_resale_plus_rent_pct          Decimal?                  @db.Decimal(15, 5)
  slug                                   String                    @unique(map: "unq_developers_slug") @db.VarChar(64)
  transactions_3_months                  Int?
  transactions_3_months_mom              Decimal?                  @db.Decimal(15, 5)
  city_id                                Int
  status                                 String                    @default("draft") @db.VarChar(255)
  sort                                   Int?
  name                                   String?
  logo                                   String?                   @db.Uuid
  directus_files                         directus_files?           @relation(fields: [logo], references: [id], onUpdate: NoAction, map: "developers_logo_foreign")
  cities                                 cities                    @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_developers_cities")
  developers_translations                developers_translations[]
  projects                               projects[]
}

model developers_translations {
  id             Int         @id @default(autoincrement())
  developers_id  Int?
  languages_code String?     @db.VarChar(255)
  description    String?
  developers     developers? @relation(fields: [developers_id], references: [id], onUpdate: NoAction, map: "developers_translations_developers_id_foreign")
  languages      languages?  @relation(fields: [languages_code], references: [code], onUpdate: NoAction, map: "developers_translations_languages_code_foreign")
}

model directus_activity {
  id                 Int                  @id @default(autoincrement())
  action             String               @db.VarChar(45)
  user               String?              @db.Uuid
  timestamp          DateTime             @default(now()) @db.Timestamptz(6)
  ip                 String?              @db.VarChar(50)
  user_agent         String?              @db.VarChar(255)
  collection         String               @db.VarChar(64)
  item               String               @db.VarChar(255)
  comment            String?
  origin             String?              @db.VarChar(255)
  directus_revisions directus_revisions[]
}

model directus_collections {
  collection                 String                 @id @db.VarChar(64)
  icon                       String?                @db.VarChar(30)
  note                       String?
  display_template           String?                @db.VarChar(255)
  hidden                     Boolean                @default(false)
  singleton                  Boolean                @default(false)
  translations               Json?                  @db.Json
  archive_field              String?                @db.VarChar(64)
  archive_app_filter         Boolean                @default(true)
  archive_value              String?                @db.VarChar(255)
  unarchive_value            String?                @db.VarChar(255)
  sort_field                 String?                @db.VarChar(64)
  accountability             String?                @default("all") @db.VarChar(255)
  color                      String?                @db.VarChar(255)
  item_duplication_fields    Json?                  @db.Json
  sort                       Int?
  group                      String?                @db.VarChar(64)
  collapse                   String                 @default("open") @db.VarChar(255)
  directus_collections       directus_collections?  @relation("directus_collectionsTodirectus_collections", fields: [group], references: [collection], onDelete: NoAction, onUpdate: NoAction, map: "directus_collections_group_foreign")
  other_directus_collections directus_collections[] @relation("directus_collectionsTodirectus_collections")
  directus_shares            directus_shares[]
}

model directus_dashboards {
  id              String            @id @db.Uuid
  name            String            @db.VarChar(255)
  icon            String            @default("dashboard") @db.VarChar(30)
  note            String?
  date_created    DateTime?         @default(now()) @db.Timestamptz(6)
  user_created    String?           @db.Uuid
  color           String?           @db.VarChar(255)
  directus_users  directus_users?   @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_dashboards_user_created_foreign")
  directus_panels directus_panels[]
}

model directus_fields {
  id                 Int      @id @default(autoincrement())
  collection         String   @db.VarChar(64)
  field              String   @db.VarChar(64)
  special            String?  @db.VarChar(64)
  interface          String?  @db.VarChar(64)
  options            Json?    @db.Json
  display            String?  @db.VarChar(64)
  display_options    Json?    @db.Json
  readonly           Boolean  @default(false)
  hidden             Boolean  @default(false)
  sort               Int?
  width              String?  @default("full") @db.VarChar(30)
  translations       Json?    @db.Json
  note               String?
  conditions         Json?    @db.Json
  required           Boolean? @default(false)
  group              String?  @db.VarChar(64)
  validation         Json?    @db.Json
  validation_message String?
}

model directus_files {
  id                                                                    String                   @id @db.Uuid
  storage                                                               String                   @db.VarChar(255)
  filename_disk                                                         String?                  @db.VarChar(255)
  filename_download                                                     String                   @db.VarChar(255)
  title                                                                 String?                  @db.VarChar(255)
  type                                                                  String?                  @db.VarChar(255)
  folder                                                                String?                  @db.Uuid
  uploaded_by                                                           String?                  @db.Uuid
  uploaded_on                                                           DateTime                 @default(now()) @db.Timestamptz(6)
  modified_by                                                           String?                  @db.Uuid
  modified_on                                                           DateTime                 @default(now()) @db.Timestamptz(6)
  charset                                                               String?                  @db.VarChar(50)
  filesize                                                              BigInt?
  width                                                                 Int?
  height                                                                Int?
  duration                                                              Int?
  embed                                                                 String?                  @db.VarChar(200)
  description                                                           String?
  location                                                              String?
  tags                                                                  String?
  metadata                                                              Json?                    @db.Json
  areas                                                                 areas[]
  areas_photos                                                          areas_photos[]
  cities                                                                cities[]
  cities_photos                                                         cities_photos[]
  developers                                                            developers[]
  directus_folders                                                      directus_folders?        @relation(fields: [folder], references: [id], onUpdate: NoAction, map: "directus_files_folder_foreign")
  directus_users_directus_files_modified_byTodirectus_users             directus_users?          @relation("directus_files_modified_byTodirectus_users", fields: [modified_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_modified_by_foreign")
  directus_users_directus_files_uploaded_byTodirectus_users             directus_users?          @relation("directus_files_uploaded_byTodirectus_users", fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_uploaded_by_foreign")
  directus_settings_directus_settings_project_logoTodirectus_files      directus_settings[]      @relation("directus_settings_project_logoTodirectus_files")
  directus_settings_directus_settings_public_backgroundTodirectus_files directus_settings[]      @relation("directus_settings_public_backgroundTodirectus_files")
  directus_settings_directus_settings_public_foregroundTodirectus_files directus_settings[]      @relation("directus_settings_public_foregroundTodirectus_files")
  floor_plans                                                           floor_plans[]
  inspection_photos                                                     inspection_photos[]
  inspections                                                           inspections[]
  malls                                                                 malls[]
  projects                                                              projects[]
  projects_photos                                                       projects_photos[]
  properties                                                            properties[]
  properties_floor_plans                                                properties_floor_plans[]
  properties_photos                                                     properties_photos[]
  test4_photos                                                          test4_photos[]
  towers                                                                towers[]
  towers_photos                                                         towers_photos[]
}

model directus_flows {
  id                  String                @id @db.Uuid
  name                String                @db.VarChar(255)
  icon                String?               @db.VarChar(30)
  color               String?               @db.VarChar(255)
  description         String?
  status              String                @default("active") @db.VarChar(255)
  trigger             String?               @db.VarChar(255)
  accountability      String?               @default("all") @db.VarChar(255)
  options             Json?                 @db.Json
  operation           String?               @unique(map: "directus_flows_operation_unique") @db.Uuid
  date_created        DateTime?             @default(now()) @db.Timestamptz(6)
  user_created        String?               @db.Uuid
  directus_users      directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_flows_user_created_foreign")
  directus_operations directus_operations[]
}

model directus_folders {
  id                     String              @id @db.Uuid
  name                   String              @db.VarChar(255)
  parent                 String?             @db.Uuid
  directus_files         directus_files[]
  directus_folders       directus_folders?   @relation("directus_foldersTodirectus_folders", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_folders_parent_foreign")
  other_directus_folders directus_folders[]  @relation("directus_foldersTodirectus_folders")
  directus_settings      directus_settings[]
}

model directus_migrations {
  version   String    @id @db.VarChar(255)
  name      String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamptz(6)
}

model directus_notifications {
  id                                                              Int             @id @default(autoincrement())
  timestamp                                                       DateTime?       @default(now()) @db.Timestamptz(6)
  status                                                          String?         @default("inbox") @db.VarChar(255)
  recipient                                                       String          @db.Uuid
  sender                                                          String?         @db.Uuid
  subject                                                         String          @db.VarChar(255)
  message                                                         String?
  collection                                                      String?         @db.VarChar(64)
  item                                                            String?         @db.VarChar(255)
  directus_users_directus_notifications_recipientTodirectus_users directus_users  @relation("directus_notifications_recipientTodirectus_users", fields: [recipient], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_notifications_recipient_foreign")
  directus_users_directus_notifications_senderTodirectus_users    directus_users? @relation("directus_notifications_senderTodirectus_users", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_notifications_sender_foreign")
}

model directus_operations {
  id                                                                         String               @id @db.Uuid
  name                                                                       String?              @db.VarChar(255)
  key                                                                        String               @db.VarChar(255)
  type                                                                       String               @db.VarChar(255)
  position_x                                                                 Int
  position_y                                                                 Int
  options                                                                    Json?                @db.Json
  resolve                                                                    String?              @unique(map: "directus_operations_resolve_unique") @db.Uuid
  reject                                                                     String?              @unique(map: "directus_operations_reject_unique") @db.Uuid
  flow                                                                       String               @db.Uuid
  date_created                                                               DateTime?            @default(now()) @db.Timestamptz(6)
  user_created                                                               String?              @db.Uuid
  directus_flows                                                             directus_flows       @relation(fields: [flow], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_operations_flow_foreign")
  directus_operations_directus_operations_rejectTodirectus_operations        directus_operations? @relation("directus_operations_rejectTodirectus_operations", fields: [reject], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_reject_foreign")
  other_directus_operations_directus_operations_rejectTodirectus_operations  directus_operations? @relation("directus_operations_rejectTodirectus_operations")
  directus_operations_directus_operations_resolveTodirectus_operations       directus_operations? @relation("directus_operations_resolveTodirectus_operations", fields: [resolve], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_resolve_foreign")
  other_directus_operations_directus_operations_resolveTodirectus_operations directus_operations? @relation("directus_operations_resolveTodirectus_operations")
  directus_users                                                             directus_users?      @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_operations_user_created_foreign")
}

model directus_panels {
  id                  String              @id @db.Uuid
  dashboard           String              @db.Uuid
  name                String?             @db.VarChar(255)
  icon                String?             @db.VarChar(30)
  color               String?             @db.VarChar(10)
  show_header         Boolean             @default(false)
  note                String?
  type                String              @db.VarChar(255)
  position_x          Int
  position_y          Int
  width               Int
  height              Int
  options             Json?               @db.Json
  date_created        DateTime?           @default(now()) @db.Timestamptz(6)
  user_created        String?             @db.Uuid
  directus_dashboards directus_dashboards @relation(fields: [dashboard], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_panels_dashboard_foreign")
  directus_users      directus_users?     @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_panels_user_created_foreign")
}

model directus_permissions {
  id             Int             @id @default(autoincrement())
  role           String?         @db.Uuid
  collection     String          @db.VarChar(64)
  action         String          @db.VarChar(10)
  permissions    Json?           @db.Json
  validation     Json?           @db.Json
  presets        Json?           @db.Json
  fields         String?
  directus_roles directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_permissions_role_foreign")
}

model directus_presets {
  id               Int             @id @default(autoincrement())
  bookmark         String?         @db.VarChar(255)
  user             String?         @db.Uuid
  role             String?         @db.Uuid
  collection       String?         @db.VarChar(64)
  search           String?         @db.VarChar(100)
  layout           String?         @default("tabular") @db.VarChar(100)
  layout_query     Json?           @db.Json
  layout_options   Json?           @db.Json
  refresh_interval Int?
  filter           Json?           @db.Json
  icon             String          @default("bookmark_outline") @db.VarChar(30)
  color            String?         @db.VarChar(255)
  directus_roles   directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_role_foreign")
  directus_users   directus_users? @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_user_foreign")
}

model directus_relations {
  id                      Int     @id @default(autoincrement())
  many_collection         String  @db.VarChar(64)
  many_field              String  @db.VarChar(64)
  one_collection          String? @db.VarChar(64)
  one_field               String? @db.VarChar(64)
  one_collection_field    String? @db.VarChar(64)
  one_allowed_collections String?
  junction_field          String? @db.VarChar(64)
  sort_field              String? @db.VarChar(64)
  one_deselect_action     String  @default("nullify") @db.VarChar(255)
}

model directus_revisions {
  id                       Int                  @id @default(autoincrement())
  activity                 Int
  collection               String               @db.VarChar(64)
  item                     String               @db.VarChar(255)
  data                     Json?                @db.Json
  delta                    Json?                @db.Json
  parent                   Int?
  directus_activity        directus_activity    @relation(fields: [activity], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_activity_foreign")
  directus_revisions       directus_revisions?  @relation("directus_revisionsTodirectus_revisions", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_revisions_parent_foreign")
  other_directus_revisions directus_revisions[] @relation("directus_revisionsTodirectus_revisions")
}

model directus_roles {
  id                   String                 @id @db.Uuid
  name                 String                 @db.VarChar(100)
  icon                 String                 @default("supervised_user_circle") @db.VarChar(30)
  description          String?
  ip_access            String?
  enforce_tfa          Boolean                @default(false)
  admin_access         Boolean                @default(false)
  app_access           Boolean                @default(true)
  directus_permissions directus_permissions[]
  directus_presets     directus_presets[]
  directus_shares      directus_shares[]
  directus_users       directus_users[]
}

model directus_sessions {
  token           String           @id @db.VarChar(64)
  user            String?          @db.Uuid
  expires         DateTime         @db.Timestamptz(6)
  ip              String?          @db.VarChar(255)
  user_agent      String?          @db.VarChar(255)
  share           String?          @db.Uuid
  origin          String?          @db.VarChar(255)
  directus_shares directus_shares? @relation(fields: [share], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_share_foreign")
  directus_users  directus_users?  @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_user_foreign")
}

model directus_settings {
  id                                                                 Int               @id @default(autoincrement())
  project_name                                                       String            @default("Directus") @db.VarChar(100)
  project_url                                                        String?           @db.VarChar(255)
  project_color                                                      String?           @db.VarChar(50)
  project_logo                                                       String?           @db.Uuid
  public_foreground                                                  String?           @db.Uuid
  public_background                                                  String?           @db.Uuid
  public_note                                                        String?
  auth_login_attempts                                                Int?              @default(25)
  auth_password_policy                                               String?           @db.VarChar(100)
  storage_asset_transform                                            String?           @default("all") @db.VarChar(7)
  storage_asset_presets                                              Json?             @db.Json
  custom_css                                                         String?
  storage_default_folder                                             String?           @db.Uuid
  basemaps                                                           Json?             @db.Json
  mapbox_key                                                         String?           @db.VarChar(255)
  module_bar                                                         Json?             @db.Json
  project_descriptor                                                 String?           @db.VarChar(100)
  translation_strings                                                Json?             @db.Json
  default_language                                                   String            @default("en-US") @db.VarChar(255)
  custom_aspect_ratios                                               Json?             @db.Json
  directus_files_directus_settings_project_logoTodirectus_files      directus_files?   @relation("directus_settings_project_logoTodirectus_files", fields: [project_logo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_project_logo_foreign")
  directus_files_directus_settings_public_backgroundTodirectus_files directus_files?   @relation("directus_settings_public_backgroundTodirectus_files", fields: [public_background], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_background_foreign")
  directus_files_directus_settings_public_foregroundTodirectus_files directus_files?   @relation("directus_settings_public_foregroundTodirectus_files", fields: [public_foreground], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_foreground_foreign")
  directus_folders                                                   directus_folders? @relation(fields: [storage_default_folder], references: [id], onUpdate: NoAction, map: "directus_settings_storage_default_folder_foreign")
}

model directus_shares {
  id                   String                @id @db.Uuid
  name                 String?               @db.VarChar(255)
  collection           String?               @db.VarChar(64)
  item                 String?               @db.VarChar(255)
  role                 String?               @db.Uuid
  password             String?               @db.VarChar(255)
  user_created         String?               @db.Uuid
  date_created         DateTime?             @default(now()) @db.Timestamptz(6)
  date_start           DateTime?             @db.Timestamptz(6)
  date_end             DateTime?             @db.Timestamptz(6)
  times_used           Int?                  @default(0)
  max_uses             Int?
  directus_sessions    directus_sessions[]
  directus_collections directus_collections? @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_collection_foreign")
  directus_roles       directus_roles?       @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_role_foreign")
  directus_users       directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_shares_user_created_foreign")
}

model directus_users {
  id                                                                      String                   @id @db.Uuid
  first_name                                                              String?                  @db.VarChar(50)
  last_name                                                               String?                  @db.VarChar(50)
  email                                                                   String?                  @unique(map: "directus_users_email_unique") @db.VarChar(128)
  password                                                                String?                  @db.VarChar(255)
  location                                                                String?                  @db.VarChar(255)
  title                                                                   String?                  @db.VarChar(50)
  description                                                             String?
  tags                                                                    Json?                    @db.Json
  avatar                                                                  String?                  @db.Uuid
  language                                                                String?                  @db.VarChar(255)
  theme                                                                   String?                  @default("auto") @db.VarChar(20)
  tfa_secret                                                              String?                  @db.VarChar(255)
  status                                                                  String                   @default("active") @db.VarChar(16)
  role                                                                    String?                  @db.Uuid
  token                                                                   String?                  @unique(map: "directus_users_token_unique") @db.VarChar(255)
  last_access                                                             DateTime?                @db.Timestamptz(6)
  last_page                                                               String?                  @db.VarChar(255)
  provider                                                                String                   @default("default") @db.VarChar(128)
  external_identifier                                                     String?                  @unique(map: "directus_users_external_identifier_unique") @db.VarChar(255)
  auth_data                                                               Json?                    @db.Json
  email_notifications                                                     Boolean?                 @default(true)
  areas_areas_created_byTodirectus_users                                  areas[]                  @relation("areas_created_byTodirectus_users")
  areas_areas_updated_byTodirectus_users                                  areas[]                  @relation("areas_updated_byTodirectus_users")
  directus_dashboards                                                     directus_dashboards[]
  directus_files_directus_files_modified_byTodirectus_users               directus_files[]         @relation("directus_files_modified_byTodirectus_users")
  directus_files_directus_files_uploaded_byTodirectus_users               directus_files[]         @relation("directus_files_uploaded_byTodirectus_users")
  directus_flows                                                          directus_flows[]
  directus_notifications_directus_notifications_recipientTodirectus_users directus_notifications[] @relation("directus_notifications_recipientTodirectus_users")
  directus_notifications_directus_notifications_senderTodirectus_users    directus_notifications[] @relation("directus_notifications_senderTodirectus_users")
  directus_operations                                                     directus_operations[]
  directus_panels                                                         directus_panels[]
  directus_presets                                                        directus_presets[]
  directus_sessions                                                       directus_sessions[]
  directus_shares                                                         directus_shares[]
  directus_roles                                                          directus_roles?          @relation(fields: [role], references: [id], onUpdate: NoAction, map: "directus_users_role_foreign")
  test_test_user_createdTodirectus_users                                  test[]                   @relation("test_user_createdTodirectus_users")
  test_test_user_updatedTodirectus_users                                  test[]                   @relation("test_user_updatedTodirectus_users")
}

model directus_webhooks {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  method      String  @default("POST") @db.VarChar(10)
  url         String  @db.VarChar(255)
  status      String  @default("active") @db.VarChar(10)
  data        Boolean @default(true)
  actions     String  @db.VarChar(100)
  collections String  @db.VarChar(255)
  headers     Json?   @db.Json
}

model exchange_rates {
  id           Int      @id @default(autoincrement())
  date_updated DateTime @db.Timestamptz(6)
  from         String?  @db.VarChar(255)
  to           String?  @db.VarChar(255)
  value        Decimal? @db.Decimal(10, 5)
}

model floor_plans {
  id               Int             @id @default(autoincrement())
  created_at       DateTime        @default(now()) @db.Timestamp(6)
  updated_at       DateTime        @default(now()) @db.Timestamp(6)
  description      String?
  is_unit_specific Boolean         @default(false)
  room_type        String?         @db.VarChar(16)
  sort             Int?
  project_id       Int
  tower_id         Int?
  status           String          @default("draft") @db.VarChar(255)
  image_file       String?         @db.Uuid
  projects         projects        @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_floor_plans_projects")
  towers           towers?         @relation(fields: [tower_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_floor_plans_towers")
  directus_files   directus_files? @relation(fields: [image_file], references: [id], onUpdate: NoAction, map: "floor_plans_image_file_foreign")
}

model inspection_photos {
  id             Int             @id @default(autoincrement())
  created_at     DateTime        @default(now()) @db.Timestamp(6)
  updated_at     DateTime        @default(now()) @db.Timestamp(6)
  description    String?
  inspection_id  Int
  status         String          @default("draft") @db.VarChar(255)
  sort           Int?
  image_file     String?         @db.Uuid
  inspections    inspections     @relation(fields: [inspection_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_inspection_photos_inspections")
  directus_files directus_files? @relation(fields: [image_file], references: [id], onUpdate: NoAction, map: "inspection_photos_image_file_foreign")
}

model inspections {
  id                   Int                 @id @default(autoincrement())
  created_at           DateTime            @default(now()) @db.Timestamp(6)
  updated_at           DateTime            @default(now()) @db.Timestamp(6)
  current_progress_pct Decimal?            @db.Decimal(15, 5)
  date                 DateTime?           @db.Timestamp(6)
  inspection_notes     String?
  project_id           Int
  status               String              @default("draft") @db.VarChar(255)
  pdf_report_file      String?             @db.Uuid
  inspection_photos    inspection_photos[]
  projects             projects            @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_inspections_projects")
  directus_files       directus_files?     @relation(fields: [pdf_report_file], references: [id], onUpdate: NoAction, map: "inspections_pdf_report_file_foreign")
}

model languages {
  code                       String                       @id @db.VarChar(255)
  name                       String?                      @db.VarChar(255)
  direction                  String?                      @default("ltr") @db.VarChar(255)
  areas_translations         areas_translations[]
  cities_translations        cities_translations[]
  developers_translations    developers_translations[]
  payment_plans_translations payment_plans_translations[]
  projects_translations      projects_translations[]
  properties_translations    properties_translations[]
  test_translations          test_translations[]
}

model leads {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  crm_contact_id String?
  crm_lead_id    String?
  email          String?
  lead_form_id   String?
  lead_url       String?
  name           String
  phone          String?
  utms           String?
}

model mall_areas {
  mall_id    Int
  area_id    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  id         Int      @id(map: "pk_mall_areas") @default(autoincrement())
  areas      areas    @relation(fields: [area_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_mall_areas_areas")
  malls      malls    @relation(fields: [mall_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_mall_areas_malls")
}

model malls {
  id             Int                      @id @default(autoincrement())
  created_at     DateTime                 @default(now()) @db.Timestamp(6)
  updated_at     DateTime                 @default(now()) @db.Timestamp(6)
  name           String
  status         String                   @default("draft") @db.VarChar(255)
  sort           Int?
  position       Unsupported("geometry")?
  city_id        Int?
  photo          String?                  @db.Uuid
  mall_areas     mall_areas[]
  cities         cities?                  @relation(fields: [city_id], references: [id], onUpdate: NoAction, map: "malls_city_id_foreign")
  directus_files directus_files?          @relation(fields: [photo], references: [id], onUpdate: NoAction, map: "malls_photo_foreign")
  project_malls  project_malls[]
}

model metro_station_areas {
  metro_station_id Int
  area_id          Int
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  id               Int            @id(map: "pk_metro_station_areas") @default(autoincrement())
  areas            areas          @relation(fields: [area_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_metro_station_areas_areas")
  metro_stations   metro_stations @relation(fields: [metro_station_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_metro_station_areas_metro_stations")
}

model metro_stations {
  id                     Int                      @id @default(autoincrement())
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  name                   String
  city_id                Int
  status                 String                   @default("draft") @db.VarChar(255)
  sort                   Int?
  position               Unsupported("geometry")?
  metro_station_areas    metro_station_areas[]
  cities                 cities                   @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_metro_stations_cities")
  project_metro_stations project_metro_stations[]
}

model payment_plans {
  id                         Int                          @id @default(autoincrement())
  created_at                 DateTime                     @db.Timestamp(6)
  updated_at                 DateTime                     @db.Timestamp(6)
  name                       String
  status                     String                       @default("draft") @db.VarChar(255)
  sort                       Int?
  payment_plans_translations payment_plans_translations[]
  project_payment_plans      project_payment_plans[]
}

model payment_plans_translations {
  id               Int            @id @default(autoincrement())
  payment_plans_id Int?
  languages_code   String?        @db.VarChar(255)
  description      String?
  languages        languages?     @relation(fields: [languages_code], references: [code], onUpdate: NoAction, map: "payment_plans_translations_languages_code_foreign")
  payment_plans    payment_plans? @relation(fields: [payment_plans_id], references: [id], onUpdate: NoAction, map: "payment_plans_translations_payment_plans_id_foreign")
}

model project_malls {
  project_id Int
  mall_id    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  id         Int      @id(map: "pk_project_malls") @default(autoincrement())
  malls      malls    @relation(fields: [mall_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_project_malls_malls")
  projects   projects @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_project_malls_projects")
}

model project_metro_stations {
  project_id       Int
  metro_station_id Int
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  id               Int            @id(map: "pk_project_metro_stations") @default(autoincrement())
  metro_stations   metro_stations @relation(fields: [metro_station_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_project_metro_stations_metro_stations")
  projects         projects       @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_project_metro_stations_projects")
}

model project_payment_plans {
  project_id      Int
  payment_plan_id Int
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  id              Int           @id(map: "pk_project_payment_plans") @default(autoincrement())
  payment_plans   payment_plans @relation(fields: [payment_plan_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_project_payment_plans_payment_plans")
  projects        projects      @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_project_payment_plans_projects")
}

model project_room_types {
  project_id         Int
  room_type          String   @db.VarChar(16)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  unit_area_sqft     Int?
  unit_min_price_aed Int?
  units_count        Int?
  id                 Int      @id(map: "pk_project_room_types") @default(autoincrement())
  projects           projects @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_project_room_types_projects")
}

model projects {
  id                            Int                      @id @default(autoincrement())
  created_at                    DateTime                 @default(now()) @db.Timestamp(6)
  updated_at                    DateTime                 @default(now()) @db.Timestamp(6)
  escrow_account_number         String?
  handover                      DateTime?                @db.Timestamp(6)
  has_beach                     Boolean?
  has_payment_plan              Boolean?
  has_personal_pool             Boolean?
  has_properties_data           Boolean?
  has_shared_pool               Boolean?
  has_waterfront                Boolean?
  inspection_date               DateTime?                @db.Timestamp(6)
  is_fully_furnished            Boolean?
  is_green_nature_living        Boolean?
  is_master                     Boolean?
  is_near_golf_course           Boolean?
  min_price_aed                 Int?
  min_price_per_sqft_aed        Int?
  name                          String
  parkings_count                Int?
  percent_completed             Decimal?                 @db.Decimal(15, 5)
  project_value_aed             Int?
  roi_stat_rent                 Int?
  roi_stat_resale_pct           Decimal?                 @db.Decimal(15, 5)
  roi_stat_resale_plus_rent     Int?
  roi_stat_resale_plus_rent_pct Decimal?                 @db.Decimal(15, 5)
  slug                          String                   @unique(map: "unq_projects_slug") @db.VarChar(64)
  sold_out                      Boolean?
  start_date                    DateTime?                @db.Timestamp(6)
  developer_id                  Int
  master_project_id             Int?
  project_status                String?                  @db.VarChar(16)
  project_type                  String?                  @db.VarChar(16)
  project_property_type         String?                  @db.VarChar(16)
  status                        String                   @default("draft") @db.VarChar(255)
  position                      Unsupported("geometry")?
  photo                         String?                  @db.Uuid
  area_id                       Int?
  has_childrens_playground      Boolean?
  has_gym                       Boolean?
  roi_stat_rent_years           Int?
  floor_plans                   floor_plans[]
  inspections                   inspections[]
  project_malls                 project_malls[]
  project_metro_stations        project_metro_stations[]
  project_payment_plans         project_payment_plans[]
  project_room_types            project_room_types[]
  developers                    developers               @relation(fields: [developer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_projects_developers")
  projects                      projects?                @relation("projectsToprojects", fields: [master_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_projects_projects")
  other_projects                projects[]               @relation("projectsToprojects")
  areas                         areas?                   @relation(fields: [area_id], references: [id], onUpdate: NoAction, map: "projects_area_id_foreign")
  directus_files                directus_files?          @relation(fields: [photo], references: [id], onUpdate: NoAction, map: "projects_photo_foreign")
  projects_photos               projects_photos[]
  projects_translations         projects_translations[]
  properties                    properties[]
  towers                        towers[]
}

model projects_translations {
  id             Int        @id @default(autoincrement())
  projects_id    Int?
  languages_code String?    @db.VarChar(255)
  description    String?
  languages      languages? @relation(fields: [languages_code], references: [code], onUpdate: NoAction, map: "projects_translations_languages_code_foreign")
  projects       projects?  @relation(fields: [projects_id], references: [id], onUpdate: NoAction, map: "projects_translations_projects_id_foreign")
}

model properties {
  id                      Int                       @id @default(autoincrement())
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime                  @default(now()) @db.Timestamp(6)
  balcony_area_sqft       Decimal?                  @db.Decimal(15, 5)
  has_balcony             Boolean?
  has_parking             Boolean?
  has_personal_pool       Boolean?
  is_penthouse            Boolean?
  is_townhouse            Boolean?
  parking_count           Int?
  property_type           String?                   @db.VarChar(16)
  room_type               String?                   @db.VarChar(16)
  sea_view                String?                   @db.VarChar(8)
  unit_area_sqft          Decimal?                  @db.Decimal(15, 5)
  unit_price_aed          Int?
  tower_id                Int?
  project_id              Int
  status                  String                    @default("draft") @db.VarChar(255)
  photo                   String?                   @db.Uuid
  name                    String?                   @db.VarChar(255)
  floor_min               Int?
  floor_max               Int?
  living_area_sqft        Decimal?                  @db.Decimal(15, 5)
  projects                projects                  @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_properties_projects")
  towers                  towers?                   @relation(fields: [tower_id], references: [id], onUpdate: NoAction, map: "fk_properties_towers")
  directus_files          directus_files?           @relation(fields: [photo], references: [id], onUpdate: NoAction, map: "properties_photo_foreign")
  properties_floor_plans  properties_floor_plans[]
  properties_photos       properties_photos[]
  properties_translations properties_translations[]
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model test {
  id                                               Int                      @id @default(autoincrement())
  status                                           String                   @default("draft") @db.VarChar(255)
  sort                                             Int?
  user_created                                     String?                  @db.Uuid
  date_created                                     DateTime?                @db.Timestamptz(6)
  user_updated                                     String?                  @db.Uuid
  date_updated                                     DateTime?                @db.Timestamptz(6)
  col1                                             Int?
  col_wysiwyg                                      String?
  col_markdown                                     String?
  col_tags                                         Json?                    @db.Json
  col_textarea                                     String?
  col_code                                         String?                  @db.VarChar(255)
  col_toggle                                       Boolean?
  col_datetime                                     DateTime?                @db.Timestamp(6)
  col_repeater                                     Json?                    @db.Json
  col_map_point                                    Unsupported("geometry")?
  col_map_polygon                                  Unsupported("geometry")?
  col_map_geometry                                 Unsupported("geometry")?
  col_color                                        String?                  @db.VarChar(255)
  col_dropdown                                     String?                  @db.VarChar(255)
  col_dropdown_2                                   String?                  @db.VarChar(255)
  col_icon                                         String?                  @db.VarChar(255)
  col_checkboxes                                   Json?                    @db.Json
  col_checkboxes_tree                              Json?                    @db.Json
  col_dropdown_mult                                Json?                    @db.Json
  col_radio                                        String?                  @db.VarChar(255)
  col_hash                                         String?                  @db.VarChar(255)
  col_slider                                       Int?
  test2_id                                         Int?
  col_decimal                                      Decimal?                 @db.Decimal(10, 5)
  col_numeric                                      Decimal?                 @db.Decimal
  col_numeric_2                                    Decimal?                 @db.Decimal(5, 5)
  test2                                            test2?                   @relation(fields: [test2_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "test_test2_id_foreign")
  directus_users_test_user_createdTodirectus_users directus_users?          @relation("test_user_createdTodirectus_users", fields: [user_created], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "test_user_created_foreign")
  directus_users_test_user_updatedTodirectus_users directus_users?          @relation("test_user_updatedTodirectus_users", fields: [user_updated], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "test_user_updated_foreign")
  test_translations                                test_translations[]
}

model test2 {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(255)
  icon        String? @db.VarChar(255)
  description String?
  test        test[]
}

model test3 {
  id                        Int     @id @default(autoincrement())
  name3                     String? @db.VarChar(255)
  test4_test4_test32Totest3 test4[] @relation("test4_test32Totest3")
  test4_test4_test3Totest3  test4[] @relation("test4_test3Totest3")
}

model test4 {
  id                        Int            @id @default(autoincrement())
  name4                     String?        @db.VarChar(255)
  test3                     Int?
  test32                    Int?
  test3_test4_test32Totest3 test3?         @relation("test4_test32Totest3", fields: [test32], references: [id], onUpdate: NoAction, map: "test4_test32_foreign")
  test3_test4_test3Totest3  test3?         @relation("test4_test3Totest3", fields: [test3], references: [id], onUpdate: NoAction, map: "test4_test3_foreign")
  test4_photos              test4_photos[]
}

model test_translations {
  id           Int        @id @default(autoincrement())
  test_id      Int?
  languages_id String?    @db.VarChar(255)
  col_wysiwyg  String?
  col_markdown String?
  col_textarea String?
  languages    languages? @relation(fields: [languages_id], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "test_translations_languages_id_foreign")
  test         test?      @relation(fields: [test_id], references: [id], onUpdate: NoAction, map: "test_translations_test_id_foreign")
}

model towers {
  id             Int             @id @default(autoincrement())
  created_at     DateTime        @default(now()) @db.Timestamp(6)
  updated_at     DateTime        @default(now()) @db.Timestamp(6)
  floor_count    Int?
  handover       DateTime?       @db.Timestamp(6)
  name           String
  start_date     DateTime?       @db.Timestamp(6)
  project_id     Int
  status         String          @default("draft") @db.VarChar(255)
  sort           Int?
  photo          String?         @db.Uuid
  slug           String          @unique(map: "towers_slug_unique") @db.VarChar(64)
  floor_plans    floor_plans[]
  properties     properties[]
  projects       projects        @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_towers_projects")
  directus_files directus_files? @relation(fields: [photo], references: [id], onUpdate: NoAction, map: "towers_photo_foreign")
  towers_photos  towers_photos[]
}

model areas_photos {
  id                Int             @id(map: "areas_files_pkey") @default(autoincrement())
  areas_id          Int?
  directus_files_id String?         @db.Uuid
  sort              Int?
  areas             areas?          @relation(fields: [areas_id], references: [id], onUpdate: NoAction, map: "areas_files_areas_id_foreign")
  directus_files    directus_files? @relation(fields: [directus_files_id], references: [id], onUpdate: NoAction, map: "areas_files_directus_files_id_foreign")
}

model cities_photos {
  id                Int             @id(map: "cities_files_pkey") @default(autoincrement())
  cities_id         Int?
  directus_files_id String?         @db.Uuid
  sort              Int?
  cities            cities?         @relation(fields: [cities_id], references: [id], onUpdate: NoAction, map: "cities_files_cities_id_foreign")
  directus_files    directus_files? @relation(fields: [directus_files_id], references: [id], onUpdate: NoAction, map: "cities_files_directus_files_id_foreign")
}

model projects_photos {
  id                Int             @id(map: "projects_files_pkey") @default(autoincrement())
  projects_id       Int?
  directus_files_id String?         @db.Uuid
  sort              Int?
  directus_files    directus_files? @relation(fields: [directus_files_id], references: [id], onUpdate: NoAction, map: "projects_files_directus_files_id_foreign")
  projects          projects?       @relation(fields: [projects_id], references: [id], onUpdate: NoAction, map: "projects_files_projects_id_foreign")
}

model properties_floor_plans {
  id                Int             @id(map: "properties_files_1_pkey") @default(autoincrement())
  properties_id     Int?
  directus_files_id String?         @db.Uuid
  sort              Int?
  description       String?         @db.VarChar(255)
  directus_files    directus_files? @relation(fields: [directus_files_id], references: [id], onUpdate: NoAction, map: "properties_files_1_directus_files_id_foreign")
  properties        properties?     @relation(fields: [properties_id], references: [id], onUpdate: NoAction, map: "properties_files_1_properties_id_foreign")
}

model properties_photos {
  id                Int             @id(map: "properties_files_pkey") @default(autoincrement())
  properties_id     Int?
  directus_files_id String?         @db.Uuid
  sort              Int?
  directus_files    directus_files? @relation(fields: [directus_files_id], references: [id], onUpdate: NoAction, map: "properties_files_directus_files_id_foreign")
  properties        properties?     @relation(fields: [properties_id], references: [id], onUpdate: NoAction, map: "properties_files_properties_id_foreign")
}

model properties_translations {
  id             Int         @id @default(autoincrement())
  properties_id  Int?
  languages_code String?     @db.VarChar(255)
  description    String?     @db.VarChar(255)
  languages      languages?  @relation(fields: [languages_code], references: [code], onUpdate: NoAction, map: "properties_translations_languages_code_foreign")
  properties     properties? @relation(fields: [properties_id], references: [id], onUpdate: NoAction, map: "properties_translations_properties_id_foreign")
}

model test4_photos {
  id                Int             @id(map: "test4_files_pkey") @default(autoincrement())
  test4_id          Int?
  directus_files_id String?         @db.Uuid
  sort              Int?
  directus_files    directus_files? @relation(fields: [directus_files_id], references: [id], onUpdate: NoAction, map: "test4_files_directus_files_id_foreign")
  test4             test4?          @relation(fields: [test4_id], references: [id], onUpdate: NoAction, map: "test4_files_test4_id_foreign")
}

model towers_photos {
  id                Int             @id(map: "towers_files_pkey") @default(autoincrement())
  towers_id         Int?
  directus_files_id String?         @db.Uuid
  sort              Int?
  directus_files    directus_files? @relation(fields: [directus_files_id], references: [id], onUpdate: NoAction, map: "towers_files_directus_files_id_foreign")
  towers            towers?         @relation(fields: [towers_id], references: [id], onUpdate: NoAction, map: "towers_files_towers_id_foreign")
}
